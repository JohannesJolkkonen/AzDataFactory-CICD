{
	"name": "clean_product_table",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Raw_ProductsTable",
						"type": "DatasetReference"
					},
					"name": "source01"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Prod_ProductsTable",
						"type": "DatasetReference"
					},
					"name": "ProductionBlobSink"
				}
			],
			"transformations": [
				{
					"name": "deduplicateNames"
				},
				{
					"name": "Aggregate1"
				},
				{
					"name": "deduplicateWithAvg"
				}
			],
			"script": "source(output(\n\t\tID as string,\n\t\tName as string,\n\t\tPrice as float '000.##',\n\t\t{Unit Cost} as float '000.##',\n\t\tManufacturer as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: true,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false,\n\twildcardPaths:['products*']) ~> source01\nsource01 aggregate(groupBy(Name),\n\teach(match(name!='Name'), $$ = first($$))) ~> deduplicateNames\ndeduplicateNames aggregate(count_dedupe = count(1)) ~> Aggregate1\nsource01 aggregate(groupBy(Name),\n\tPrice = round(avg(Price), 2),\n\t\t{Unit Cost} = round(avg({Unit Cost}),2),\n\t\tID = first(ID),\n\t\tManufacturer = first(Manufacturer)) ~> deduplicateWithAvg\ndeduplicateWithAvg sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> ProductionBlobSink"
		}
	}
}